import tkinter as tk
from tkinter import messagebox

class TaskManagerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Gestor de Tareas Pendientes")

        # Lista para almacenar las tareas
        self.tasks = []

        # Campo de entrada para nuevas tareas
        self.task_entry = tk.Entry(root, width=50)
        self.task_entry.pack(pady=10)

        # Botón para añadir una nueva tarea
        self.add_task_button = tk.Button(root, text="Añadir Tarea", command=self.add_task)
        self.add_task_button.pack(pady=5)

        # Botón para marcar la tarea seleccionada como completada
        self.complete_task_button = tk.Button(root, text="Marcar como Completada", command=self.complete_task)
        self.complete_task_button.pack(pady=5)

        # Botón para eliminar la tarea seleccionada
        self.delete_task_button = tk.Button(root, text="Eliminar Tarea", command=self.delete_task)
        self.delete_task_button.pack(pady=5)

        # Lista para mostrar las tareas
        self.task_listbox = tk.Listbox(root, width=50, height=10)
        self.task_listbox.pack(pady=10)

        # Atajos de teclado para mejorar la usabilidad
        self.root.bind('<Return>', self.add_task_event)
        self.root.bind('<c>', self.complete_task_event)
        self.root.bind('<Delete>', self.delete_task_event)
        self.root.bind('<Escape>', self.close_app)

    def add_task(self, event=None):
        """Añade una nueva tarea a la lista."""
        task = self.task_entry.get()
        if task:
            self.tasks.append(task)
            self.update_task_list()
            self.task_entry.delete(0, tk.END)  # Limpia el campo de entrada
            messagebox.showinfo("Tarea Añadida", f"La tarea '{task}' ha sido añadida.")
        else:
            messagebox.showwarning("Advertencia", "Por favor, ingresa una tarea antes de añadir.")

    def complete_task(self, event=None):
        """Marca la tarea seleccionada como completada."""
        try:
            selected_index = self.task_listbox.curselection()[0]
            self.tasks[selected_index] += " (Completada)"
            self.update_task_list()
            messagebox.showinfo("Tarea Completada", "¡Bien hecho! Has completado una tarea.")
        except IndexError:
            messagebox.showwarning("Advertencia", "Por favor, selecciona una tarea para marcar como completada.")

    def delete_task(self, event=None):
        """Elimina la tarea seleccionada de la lista."""
        try:
            selected_index = self.task_listbox.curselection()[0]
            deleted_task = self.tasks[selected_index]
            del self.tasks[selected_index]
            self.update_task_list()
            messagebox.showinfo("Tarea Eliminada", f"La tarea '{deleted_task}' ha sido eliminada.")
        except IndexError:
            messagebox.showwarning("Advertencia", "Por favor, selecciona una tarea para eliminar.")

    def update_task_list(self):
        """Actualiza la lista de tareas mostrada en la interfaz."""
        self.task_listbox.delete(0, tk.END)  # Limpia la lista actual
        for task in self.tasks:
            self.task_listbox.insert(tk.END, task)  # Añade cada tarea a la lista

    def add_task_event(self, event):
        """Manejador de eventos para añadir tarea con la tecla 'Enter'."""
        self.add_task()

    def complete_task_event(self, event):
        """Manejador de eventos para completar tarea con la tecla 'C'."""
        self.complete_task()

    def delete_task_event(self, event):
        """Manejador de eventos para eliminar tarea con la tecla 'Delete'."""
        self.delete_task()

    def close_app(self, event):
        """Cierra la aplicación al presionar 'Escape'."""
        self.root.quit()

if __name__ == "__main__":
    root = tk.Tk()
    app = TaskManagerApp(root)
    root.mainloop()
